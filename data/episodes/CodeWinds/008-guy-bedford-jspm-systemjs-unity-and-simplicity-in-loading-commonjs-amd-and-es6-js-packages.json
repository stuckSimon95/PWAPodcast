{"title":"008 Guy Bedford - jspm & SystemJS - Unity and simplicity in loading CommonJS, AMD, and ES6 JS packages","description":"<p><img src=\"http://codewinds.com/assets/people/guy-bedford-jsconf-2014.jpg\" alt=\"guy-bedford-photo\" title=\"Guy Bedford speaking at JSConf 2014\"></p>\n<p>JavaScript module loading has traditionally been difficult due to diverse module formats and difficult configuration. With so many competing standards it is hard to get everything to work well together.</p>\n<p>Guy has come forward with a solution which simplifies loading and management of JS packages. This is a full workflow solution including both dynamic loading and capability to build bundles for production.</p>\n<div id=\"toc\"><ol><li><a href=\"#episode_info\">Episode Info</a></li><li><a href=\"#episode_notes\">Episode Notes</a><ol><li><a href=\"#simple_example_of_systemjs_in_browser\">Simple example of SystemJS in browser</a></li><li><a href=\"#links\">Links</a></li><li><a href=\"#videos\">Videos</a></li><li><a href=\"#other_podcasts\">Other podcasts</a></li></ol></li></ol></div>\n\n<a name=\"episode_info\"></a><h2 id=\"episode-info\">Episode Info</h2>\n<ul>\n<li>Episode: CW 008</li>\n<li>Published: July 1st, 2014</li>\n<li>Tags: nodejs, js,es6,commonjs,amd,es6,packages,modules,jsconf</li>\n<li>Duration: 22:12</li>\n</ul>\n<a name=\"episode_notes\"></a><h2 id=\"episode-notes\">Episode Notes</h2>\n<ul>\n<li>03:00 - <a href=\"https://github.com/ModuleLoader/es6-module-loader\" title=\"ES6 module loader polyfill\">es6-module-loader</a></li>\n<li>04:25 - CommonJS, AMD, ES6 modules. Browserify</li>\n<li>05:10 - <a href=\"https://github.com/systemjs/systemjs\" title=\"Spec-compliant universal module loader - loads ES6 modules, AMD, CommonJS and global scripts.\">SystemJS</a> - loads ES6 modules, AMD, CommonJS and global scripts. Designed in spec itself, IE8+, suitable for production, runs in browser and Node.js, promises API</li>\n<li>08:00 - SystemJS workflow - dynamic loading and build capability</li>\n<li>10:00 - Using SystemJS with build tools</li>\n<li>10:30 - SystemJS community</li>\n<li>11:30 - Auto file type detection (CJS, AMD, UMD, …) or can specify</li>\n<li>12:45 - Optional configuration. Made to be as easy as possible to get going</li>\n<li>14:30 - <a href=\"http://jspm.io/\" title=\"jspm JavaScript Package Manager\">jspm</a> - JavaScript Package Manager - CDN for SystemJS, require by name.</li>\n<li>15:30 - Core ideas - making requiring really simple and making package management really simple</li>\n<li>16:00 - Design of loader and manager</li>\n<li>17:28 - Ready for review and full workflow. An invitation to the community</li>\n<li>18:26 - GitHub locations for projects, examples</li>\n<li>20:34 - How to follow up, closing remarks</li>\n</ul>\n<a name=\"simple_example_of_systemjs_in_browser\"></a><h3 id=\"simple-example-of-systemjs-in-browser\">Simple example of SystemJS in browser</h3>\n<pre class=\"highlight\"><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"system.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"actionscript\">\n  System.import(<span class=\"hljs-string\">'app/app'</span>)\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span> </span>{\n    <span class=\"hljs-comment\">// we add this since promises suppress all errors</span>\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">throw</span> e;\n    });\n  });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<a name=\"links\"></a><h3 id=\"links\">Links</h3>\n<ul>\n<li><a href=\"https://github.com/ModuleLoader/es6-module-loader\" title=\"ES6 module loader polyfill\">es6-module-loader</a> - ES6 module loader polyfill</li>\n<li><a href=\"https://github.com/systemjs/systemjs\" title=\"Spec-compliant universal module loader - loads ES6 modules, AMD, CommonJS and global scripts.\">SystemJS</a> - Spec-compliant universal module loader - loads ES6 modules, AMD, CommonJS and global scripts.</li>\n<li><a href=\"https://github.com/systemjs/builder\" title=\"SystemJS build tool\">SystemJS-Build-Tool</a> - Build tool for SystemJS which can bundle for production</li>\n<li><a href=\"http://jspm.io/\" title=\"jspm JavaScript Package Manager\">jspm</a> - Package manager for the SystemJS universal module loader, built on top of the dynamic ES6 module loader. Load any module format (ES6, AMD, CommonJS and globals) directly from endpoints such as npm and github with flat versioned dependency management. For production, use the <a href=\"https://github.com/jspm/jspm-cli\" title=\"jspm CLI tool\">jspm CLI</a> tool to download packages locally, lock down versions and build into a bundle. In development, load modules directly from CDN for frictionless experimentation, switching into production on the same code with a single configuration change. Supports SPDY with server push.</li>\n<li><a href=\"https://github.com/jspm/demo-es6\" title=\"jspm ES6 module loading workflow demo\">jspm-es6-demo</a> - jspm ES6 module loading workflow demo - write ES6 modules, load external from CDN, install locally using CDN versions, bundle into single file for production</li>\n<li><a href=\"https://groups.google.com/forum/#!forum/jspm-io\" title=\"jspm Google group\">jspm Google Group</a> - Discussion forum for JSPM</li>\n<li><a href=\"http://twitter.com/guybedford\" title=\"Guy Bedford Twitter\">Guy Bedford’s Twitter</a></li>\n<li><a href=\"https://github.com/guybedford\" title=\"Guy Bedford GitHub\">Guy Bedford’s GitHub repositories</a></li>\n<li>Jeff Barczewski, Founder, CodeWinds <a href=\"https://twitter.com/jeffbski\">twitter</a></li>\n<li>CodeWinds <a href=\"https://twitter.com/codewinds\">twitter</a></li>\n</ul>\n<a name=\"videos\"></a><h3 id=\"videos\">Videos</h3>\n<ul>\n<li><a href=\"http://es6rocks.com/2014/06/practical-workflows-es6-modules/\">Fluent Conf 2014</a> - Guy Bedford on ES6 modules, jspm, SystemJS</li>\n<li><a href=\"http://www.confreaks.com/videos/3231-mwjs-browser-package-management\">Mountain West JS 2014</a> - Guy Bedford on the genesis of jspm, SystemJS</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL37ZVnwpeshFXOP2lqCUykYPXYNsK_fgN\" title=\"JSConf 2014 video playlist\">JSConf 2014 videos</a> - Videos from the JSConf 2014 sessions (videos are in progress of being posted)</li>\n</ul>\n\n\n\n\n<a name=\"other_podcasts\"></a><h3 id=\"other-podcasts\">Other podcasts</h3>\n<ul>\n<li><a href=\"http://javascriptjabber.com/115-jsj-the-es6-module-loader-polyfill-systemjs-and-jspm-with-guy-bedford/\">JSJabber 115</a></li>\n</ul>","pubdate":"2014-07-02T01:00:00.000Z","link":"http://codewinds.com/podcast/008.html","guid":"http://codewinds.com/podcast/008.html","image":"http://codewinds.com/assets/codewinds/codewinds-podcast-300.png","podcast":{"title":"CodeWinds - Leading edge web developer news and training | javascript / React.js / Node.js / HTML5 / web development - Jeff Barczewski","description":"Keep up with the latest web developer technologies and news covering javascript, React.js, Node.js, HTML5. Learn the current best practices in web and mobile app development.","image":"http://codewinds.com/assets/codewinds/codewinds-podcast-1400.png"}}