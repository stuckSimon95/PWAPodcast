{"Name":"Podstr","LongName":"Podstr","lowerAppName":"Podstr","slug":"002-first-look-at-hapijs-20-the-nodejs-web-framework-from-walmart-labs","title":"002 First look at Hapijs 2.0, the Node.js web framework from Walmart Labs","description":"<p>This is a review of the <a href=\"http://hapijs.com\" title=\"Hapijs main site\">Hapi</a> 2.0 functionality unveiled last Monday, Jan 27, 2014 at &amp;yet. The event was <a href=\"http://www.youtube.com/watch?v=B3u0XkbhleA&amp;t=1461\" title=\"Eran Hammer Hapi 2.0 live stream from &amp;yet\">live streamed</a> so I was able to watch and take notes. Eran Hammer <a href=\"https://twitter.com/eranhammer\" title=\"Eran Hammer twitter\">@eranhammer</a>, a Walmart labs engineer and lead developer for Hapi shared a top to bottom feature discussion including the new changes for version 2. <a href=\"https://dl.dropboxusercontent.com/u/52139546/hapi%20yet%3F.pdf\" title=\"Eran&apos;s slides for the Hapi 2.0 live stream\">Eran’s Slides</a></p>\n<p>My goal with this podcast is to mention some of the key changes with Hapi 2 and how you would leverage them in your code.</p>\n<p><img src=\"https://raw.github.com/spumko/hapi/master/images/hapi.png\" alt=\"hapi-png\" title=\"Hapi\"></p>\n<p>This review and Eran’s presentation are done such that you do not need have a familiarity with Hapi to get value, new users should come away with some understanding of Hapi and how it can be useful for building robust web applications.</p>\n<div id=\"toc\"><ol><li><a href=\"#episode_info\">Episode Info</a></li><li><a href=\"#episode_notes\">Episode Notes</a><ol><li><a href=\"#background\">Background</a></li><li><a href=\"#routes_caching_state\">Routes, Caching, State</a></li><li><a href=\"#plugins\">Plugins</a></li><li><a href=\"#authorization\">Authorization</a></li><li><a href=\"#ops\">Ops</a></li><li><a href=\"#postmile_example_app\">Postmile example app</a></li></ol></li><li><a href=\"#major_breaking_changes\">Major breaking changes</a></li><li><a href=\"#resources\">Resources</a></li><li><a href=\"#summary\">Summary</a></li></ol></div>\n\n<a name=\"episode_info\"></a><h2 id=\"episode-info\">Episode Info</h2>\n<ul>\n<li>Episode: CW 002</li>\n<li>Published: February 1st, 2014</li>\n<li>Tags: nodejs, hapijs</li>\n<li>Duration: 21:46</li>\n</ul>\n<a name=\"episode_notes\"></a><h2 id=\"episode-notes\">Episode Notes</h2>\n<a name=\"background\"></a><h3 id=\"background\">Background</h3>\n<ul>\n<li>show notes <a href=\"http://codewinds.com/podcast/002.html\">http://codewinds.com/podcast/002.html</a></li>\n<li>I have a link to the original live stream, the content starts at about 24 minutes in, so the URL in the show notes jumps directly to that spot.</li>\n<li>Hapi is the awesome open source web framework created by Walmart Labs.</li>\n<li>The Hapi framework grew out of years of development first at Yahoo as Sled, later renamed Postmile, then at Walmart Labs.</li>\n<li>Initially Eran tried to build on Express a popular web framework, but found issues with plugin order, undocumented dependencies, fragility with large team use.</li>\n<li>Hapi was developed by Walmart Labs for their mobile division</li>\n<li>Hapi is built as a scalable web framework that they could use to evolve their system over time.</li>\n<li>Initiallly used to reverse proxy or pass through requests to their existing backend written in java or other languages.</li>\n<li>Then decorate, batch, and begin to replace legacy code with new code in Node.js</li>\n<li>It ran 100% of their mobile traffic starting with Black Friday and proved its stability running at about 1-2% cpu on 50 servers throughout the highest load. Lasagna graphs flatlines for cpu and memory use</li>\n<li>Walmart starting to replace more of its legacy code with Hapi and even now part of walmart.com</li>\n<li>Hapi has great REST API support as well as infrastructure for building web apps or even serving static content</li>\n<li>Just configure the routes and you are ready, no extra plugins are necessary for the most common functionality</li>\n<li>Liked that Eran provides some quick commentary about features and how they evolved</li>\n<li>Hapi 2.0 isn’t a massive increase in new functionality, in fact it is more about taking out the cruft, eliminating the redundant ways to do things. Names that evolved over time, picking the best and cleaning up the others.</li>\n<li>This strategy shows the wisdom and experience of its architect, to resi the urge to add features by first solidifying the base.</li>\n</ul>\n<a name=\"routes_caching_state\"></a><h3 id=\"routes-caching-state\">Routes, Caching, State</h3>\n<ul>\n<li>Route <code>handler(request, reply)</code> signature changed</li>\n<li><code>server.route({})</code>, can keep routes in one place while config and handler in separate module. validation is configurable, state (cookies)</li>\n<li><code>server.table()</code> gives you the active routing table</li>\n<li>Hapi is a configuration centric framework, set js properties, then it tries to stay out of your way.</li>\n<li>Hapi is written so the meat of your web application can stay pure, you don’t have to deal with the HTTP mechanisms unless you need to for a special case. This leads to clean code which is more focused on your business logic and less on how to deliver via HTTP.</li>\n<li>Helpers can abstract out functionality used in many places like looking up a user profile or users shopping cart</li>\n<li>Caching is changed in 2.0, dropping support for full page caching. You can still configure the client cache headers and expiry but the team removed the page cache since they didn’t want to have a half baked solution, one that didn’t handle all the variety of use cases.</li>\n<li>They still have great support for helper caching which is more straight forward.</li>\n<li>Eran said they will possibly add page caching back in later or I’d expect there to be a basic plugin which provides a basic page cache solving the simple use cases.</li>\n<li>Route prerequesites clean up async handling, can specify arrays for parallel followed by single tasks which are processed serially and any combintion.</li>\n<li><code>handler.bind</code> can be used to share state using object methods</li>\n<li><code>reply().hold()</code>, later calling <code>send()</code> when ready</li>\n<li>Cookie ttl configuration can now be done in a central location cleaninpu up the route config</li>\n<li>Exentensive cookie functionality - automatically encoding in base64 json or even using encryption, hashing, and expiration with Eran’s Iron container</li>\n</ul>\n<a name=\"plugins\"></a><h3 id=\"plugins\">Plugins</h3>\n<ul>\n<li>Plugins are a cornerstone of Hapi. These differ from something like Express in that plugins are just groupings of server functionality that can be mixed together into servers. You can organize a feature’s functionality, its routes, its configuration, and dependencies. This lives like a normal node.js package and only needs a register method to use with Hapi. These can be developed, versioned separately, mixed in to the server.</li>\n<li>Hapi ensures that once they are all registered that the routes are all valid and nothing conflicts, its a large team’s dream. Easy to test new veerions.</li>\n<li>Plugins can do everything you can do with the server, add routes, helpers, etc.</li>\n<li><code>plugin.composer</code> or command line option to hapi allows you to build a server with simply a package.json and a config.json specifying plugins to use.</li>\n<li>If you couple plugins along with Hapi’s Confidence module you can have one setup which can provide server config for all your various environments.</li>\n<li>The Confidence module provides dynamic configs which can be used for server environments or even runtime use for A/B testing</li>\n<li>Plugin cache is now scoped so its data won’t collide with other plugins</li>\n</ul>\n<a name=\"authorization\"></a><h3 id=\"authorization\">Authorization</h3>\n<ul>\n<li>Authorization is now properly extracted into schemes and strategies, basic auth, hawk, etc. It is much easier to setup authentication and you have options to make authentication required and optional.</li>\n<li>Hapi has defined life cycle extension points at which you can register to have your code called during request life cycle. For instance you could hook in at the beginning of the request, before auth, after auth, before response, etc.</li>\n<li>These extensions can specify dependencies and whether they need to go before or after others.</li>\n<li>One change to how the signature for these extensions is that they now have two params (request and reply) just like handlers. You can call the reply(null) to continue response unchanged. Website docs don’t reflect this yet, so look at the code or tests.</li>\n<li>You can now do additional things for streamed responses in your extensions like set headers as well as peek into the packets being sent back</li>\n</ul>\n<a name=\"ops\"></a><h3 id=\"ops\">Ops</h3>\n<ul>\n<li>New ops functionality<ul>\n<li>Can have server load and memory use logged for easy server health montioring</li>\n<li>Configure max input size, timeouts for client and server</li>\n<li>You can register tail methods which run after a response has been sent</li>\n<li><code>server.inject</code> allows you to use the hapi stack without going through the network stack, great for testing and even for production use if you need to call back in like with OAuth 2.0</li>\n<li>There is now a simulate property for simulating connection close issues</li>\n</ul>\n</li>\n</ul>\n<a name=\"postmile_example_app\"></a><h3 id=\"postmile-example-app\">Postmile example app</h3>\n<ul>\n<li>github.com/hueniverse/postmile - large sample app which has been upgraded to Hapi 2.0. It is a collaborative list making tool using hapi 2.0 and Mongo.</li>\n</ul>\n<a name=\"major_breaking_changes\"></a><h2 id=\"major-breaking-changes\">Major breaking changes</h2>\n<ul>\n<li><code>handler(request, reply)</code>, extensions have similar signature</li>\n<li>methods that had many aliases are now simplified like server.route</li>\n<li>page caching removed for now</li>\n<li>route prerequisites now use arrays to designate parallel tasks, and you can mix serial and parallel</li>\n<li>read up on the new auth configuration and mechanisms</li>\n<li><a href=\"https://github.com/spumko/hapi/issues/1178\">https://github.com/spumko/hapi/issues/1178</a> - github issue with all the Hapi 2.0 breaking changes</li>\n</ul>\n<a name=\"resources\"></a><h2 id=\"resources\">Resources</h2>\n<ul>\n<li><a href=\"http://hapijs.com\">http://hapijs.com</a> - main site, docs being added for 2.0</li>\n<li><a href=\"https://github.com/spumko/hapi\">https://github.com/spumko/hapi</a> - git repo for Hapi</li>\n<li><a href=\"https://github.com/spumko/hapi/issues/1178\">https://github.com/spumko/hapi/issues/1178</a> - github issue with all the Hapi 2.0 breaking changes</li>\n<li><a href=\"https://github.com/spumko\">https://github.com/spumko</a> - extracted Hapi functionality for use with Hapi or separately</li>\n<li><a href=\"https://dl.dropboxusercontent.com/u/52139546/hapi%20yet%3F.pdf\">https://dl.dropboxusercontent.com/u/52139546/hapi%20yet%3F.pdf</a> - hapi-yet-slides with lots of code examples which Eran Hammer used for his live stream</li>\n<li><a href=\"http://www.youtube.com/watch?v=B3u0XkbhleA&amp;t=1461\">http://www.youtube.com/watch?v=B3u0XkbhleA&amp;t=1461</a> Eran Hammer Hapi Yet (Hapi 2.0) live stream at &amp;yet, link jumps directly to 24 min where talk starts</li>\n<li><a href=\"https://github.com/hueniverse/postmile\">https://github.com/hueniverse/postmile</a> Eran Hammer’s sizeable hapi example using many of the Hapi features. Postmile is a collaborative list making tool using hapi 2.0 and mongo.</li>\n<li><a href=\"https://github.com/poeticninja/hapi-ninja\">https://github.com/poeticninja/hapi-ninja</a> - Saul Maddox’s <a href=\"https://twitter.com/poeticninja\" title=\"Saul Maddox twitter\">@poeticninja</a> boilerplate Hapi server example Node.js, Hapi 2.0, Swig templates, Gulp task runner</li>\n<li>Follow <a href=\"http://codewinds.com/\">http://codewinds.com/</a> blog and podcast for continuing coverage</li>\n</ul>\n<a name=\"summary\"></a><h2 id=\"summary\">Summary</h2>\n<p>So in summary, Hapi 2.0 is a well thought out release which cleans up and solidifies the codebase while adding some key functionality that can be built on.</p>\n<p> With Walmart putting this framework through the paces and other companies following in its footsteps like the company I am consulting to MasterCard, this framework has evolved with clarity, performance, team usability, and has great deploy and ops support.</p>\n<p>Furthermore, Eran and his team have proved that Hapi can handle Black Friday load with ultimate grace, and this new version solidifies its position among Node web frameworks.</p>\n<p>So I encourage you to check out Hapi, and let me know what you think. Head over to codewinds.com and leave me a comment or send me a tweet.</p>","layout":"default","app-shell":"app","body":"<div class=\"container\">  <div class=\"row\">\r\n    <div class=\"card\">\r\n      <img src=\"[object Object]\" alt=\"002 First look at Hapijs 2.0, the Node.js web framework from Walmart Labs\" class=\"card-img-top\">\r\n      <div class=\"card-body\">\r\n        <h3 class=\"card-title\">002 First look at Hapijs 2.0, the Node.js web framework from Walmart Labs</h3>\r\n      </div>\r\n      <i class=\"fa fa-plus\" aria-hidden=\"true\"></i>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <audio src=\"https://api.spreaker.com/download/episode/8734727/ep105_mixdown.mp3\" controls=\"controls\"></audio>\r\n  </div>\r\n  <div class=\"row\">\r\n    <p><p>This is a review of the <a href=\"http://hapijs.com\" title=\"Hapijs main site\">Hapi</a> 2.0 functionality unveiled last Monday, Jan 27, 2014 at &amp;yet. The event was <a href=\"http://www.youtube.com/watch?v=B3u0XkbhleA&amp;t=1461\" title=\"Eran Hammer Hapi 2.0 live stream from &amp;yet\">live streamed</a> so I was able to watch and take notes. Eran Hammer <a href=\"https://twitter.com/eranhammer\" title=\"Eran Hammer twitter\">@eranhammer</a>, a Walmart labs engineer and lead developer for Hapi shared a top to bottom feature discussion including the new changes for version 2. <a href=\"https://dl.dropboxusercontent.com/u/52139546/hapi%20yet%3F.pdf\" title=\"Eran&apos;s slides for the Hapi 2.0 live stream\">Eran’s Slides</a></p>\n<p>My goal with this podcast is to mention some of the key changes with Hapi 2 and how you would leverage them in your code.</p>\n<p><img src=\"https://raw.github.com/spumko/hapi/master/images/hapi.png\" alt=\"hapi-png\" title=\"Hapi\"></p>\n<p>This review and Eran’s presentation are done such that you do not need have a familiarity with Hapi to get value, new users should come away with some understanding of Hapi and how it can be useful for building robust web applications.</p>\n<div id=\"toc\"><ol><li><a href=\"#episode_info\">Episode Info</a></li><li><a href=\"#episode_notes\">Episode Notes</a><ol><li><a href=\"#background\">Background</a></li><li><a href=\"#routes_caching_state\">Routes, Caching, State</a></li><li><a href=\"#plugins\">Plugins</a></li><li><a href=\"#authorization\">Authorization</a></li><li><a href=\"#ops\">Ops</a></li><li><a href=\"#postmile_example_app\">Postmile example app</a></li></ol></li><li><a href=\"#major_breaking_changes\">Major breaking changes</a></li><li><a href=\"#resources\">Resources</a></li><li><a href=\"#summary\">Summary</a></li></ol></div>\n\n<a name=\"episode_info\"></a><h2 id=\"episode-info\">Episode Info</h2>\n<ul>\n<li>Episode: CW 002</li>\n<li>Published: February 1st, 2014</li>\n<li>Tags: nodejs, hapijs</li>\n<li>Duration: 21:46</li>\n</ul>\n<a name=\"episode_notes\"></a><h2 id=\"episode-notes\">Episode Notes</h2>\n<a name=\"background\"></a><h3 id=\"background\">Background</h3>\n<ul>\n<li>show notes <a href=\"http://codewinds.com/podcast/002.html\">http://codewinds.com/podcast/002.html</a></li>\n<li>I have a link to the original live stream, the content starts at about 24 minutes in, so the URL in the show notes jumps directly to that spot.</li>\n<li>Hapi is the awesome open source web framework created by Walmart Labs.</li>\n<li>The Hapi framework grew out of years of development first at Yahoo as Sled, later renamed Postmile, then at Walmart Labs.</li>\n<li>Initially Eran tried to build on Express a popular web framework, but found issues with plugin order, undocumented dependencies, fragility with large team use.</li>\n<li>Hapi was developed by Walmart Labs for their mobile division</li>\n<li>Hapi is built as a scalable web framework that they could use to evolve their system over time.</li>\n<li>Initiallly used to reverse proxy or pass through requests to their existing backend written in java or other languages.</li>\n<li>Then decorate, batch, and begin to replace legacy code with new code in Node.js</li>\n<li>It ran 100% of their mobile traffic starting with Black Friday and proved its stability running at about 1-2% cpu on 50 servers throughout the highest load. Lasagna graphs flatlines for cpu and memory use</li>\n<li>Walmart starting to replace more of its legacy code with Hapi and even now part of walmart.com</li>\n<li>Hapi has great REST API support as well as infrastructure for building web apps or even serving static content</li>\n<li>Just configure the routes and you are ready, no extra plugins are necessary for the most common functionality</li>\n<li>Liked that Eran provides some quick commentary about features and how they evolved</li>\n<li>Hapi 2.0 isn’t a massive increase in new functionality, in fact it is more about taking out the cruft, eliminating the redundant ways to do things. Names that evolved over time, picking the best and cleaning up the others.</li>\n<li>This strategy shows the wisdom and experience of its architect, to resi the urge to add features by first solidifying the base.</li>\n</ul>\n<a name=\"routes_caching_state\"></a><h3 id=\"routes-caching-state\">Routes, Caching, State</h3>\n<ul>\n<li>Route <code>handler(request, reply)</code> signature changed</li>\n<li><code>server.route({})</code>, can keep routes in one place while config and handler in separate module. validation is configurable, state (cookies)</li>\n<li><code>server.table()</code> gives you the active routing table</li>\n<li>Hapi is a configuration centric framework, set js properties, then it tries to stay out of your way.</li>\n<li>Hapi is written so the meat of your web application can stay pure, you don’t have to deal with the HTTP mechanisms unless you need to for a special case. This leads to clean code which is more focused on your business logic and less on how to deliver via HTTP.</li>\n<li>Helpers can abstract out functionality used in many places like looking up a user profile or users shopping cart</li>\n<li>Caching is changed in 2.0, dropping support for full page caching. You can still configure the client cache headers and expiry but the team removed the page cache since they didn’t want to have a half baked solution, one that didn’t handle all the variety of use cases.</li>\n<li>They still have great support for helper caching which is more straight forward.</li>\n<li>Eran said they will possibly add page caching back in later or I’d expect there to be a basic plugin which provides a basic page cache solving the simple use cases.</li>\n<li>Route prerequesites clean up async handling, can specify arrays for parallel followed by single tasks which are processed serially and any combintion.</li>\n<li><code>handler.bind</code> can be used to share state using object methods</li>\n<li><code>reply().hold()</code>, later calling <code>send()</code> when ready</li>\n<li>Cookie ttl configuration can now be done in a central location cleaninpu up the route config</li>\n<li>Exentensive cookie functionality - automatically encoding in base64 json or even using encryption, hashing, and expiration with Eran’s Iron container</li>\n</ul>\n<a name=\"plugins\"></a><h3 id=\"plugins\">Plugins</h3>\n<ul>\n<li>Plugins are a cornerstone of Hapi. These differ from something like Express in that plugins are just groupings of server functionality that can be mixed together into servers. You can organize a feature’s functionality, its routes, its configuration, and dependencies. This lives like a normal node.js package and only needs a register method to use with Hapi. These can be developed, versioned separately, mixed in to the server.</li>\n<li>Hapi ensures that once they are all registered that the routes are all valid and nothing conflicts, its a large team’s dream. Easy to test new veerions.</li>\n<li>Plugins can do everything you can do with the server, add routes, helpers, etc.</li>\n<li><code>plugin.composer</code> or command line option to hapi allows you to build a server with simply a package.json and a config.json specifying plugins to use.</li>\n<li>If you couple plugins along with Hapi’s Confidence module you can have one setup which can provide server config for all your various environments.</li>\n<li>The Confidence module provides dynamic configs which can be used for server environments or even runtime use for A/B testing</li>\n<li>Plugin cache is now scoped so its data won’t collide with other plugins</li>\n</ul>\n<a name=\"authorization\"></a><h3 id=\"authorization\">Authorization</h3>\n<ul>\n<li>Authorization is now properly extracted into schemes and strategies, basic auth, hawk, etc. It is much easier to setup authentication and you have options to make authentication required and optional.</li>\n<li>Hapi has defined life cycle extension points at which you can register to have your code called during request life cycle. For instance you could hook in at the beginning of the request, before auth, after auth, before response, etc.</li>\n<li>These extensions can specify dependencies and whether they need to go before or after others.</li>\n<li>One change to how the signature for these extensions is that they now have two params (request and reply) just like handlers. You can call the reply(null) to continue response unchanged. Website docs don’t reflect this yet, so look at the code or tests.</li>\n<li>You can now do additional things for streamed responses in your extensions like set headers as well as peek into the packets being sent back</li>\n</ul>\n<a name=\"ops\"></a><h3 id=\"ops\">Ops</h3>\n<ul>\n<li>New ops functionality<ul>\n<li>Can have server load and memory use logged for easy server health montioring</li>\n<li>Configure max input size, timeouts for client and server</li>\n<li>You can register tail methods which run after a response has been sent</li>\n<li><code>server.inject</code> allows you to use the hapi stack without going through the network stack, great for testing and even for production use if you need to call back in like with OAuth 2.0</li>\n<li>There is now a simulate property for simulating connection close issues</li>\n</ul>\n</li>\n</ul>\n<a name=\"postmile_example_app\"></a><h3 id=\"postmile-example-app\">Postmile example app</h3>\n<ul>\n<li>github.com/hueniverse/postmile - large sample app which has been upgraded to Hapi 2.0. It is a collaborative list making tool using hapi 2.0 and Mongo.</li>\n</ul>\n<a name=\"major_breaking_changes\"></a><h2 id=\"major-breaking-changes\">Major breaking changes</h2>\n<ul>\n<li><code>handler(request, reply)</code>, extensions have similar signature</li>\n<li>methods that had many aliases are now simplified like server.route</li>\n<li>page caching removed for now</li>\n<li>route prerequisites now use arrays to designate parallel tasks, and you can mix serial and parallel</li>\n<li>read up on the new auth configuration and mechanisms</li>\n<li><a href=\"https://github.com/spumko/hapi/issues/1178\">https://github.com/spumko/hapi/issues/1178</a> - github issue with all the Hapi 2.0 breaking changes</li>\n</ul>\n<a name=\"resources\"></a><h2 id=\"resources\">Resources</h2>\n<ul>\n<li><a href=\"http://hapijs.com\">http://hapijs.com</a> - main site, docs being added for 2.0</li>\n<li><a href=\"https://github.com/spumko/hapi\">https://github.com/spumko/hapi</a> - git repo for Hapi</li>\n<li><a href=\"https://github.com/spumko/hapi/issues/1178\">https://github.com/spumko/hapi/issues/1178</a> - github issue with all the Hapi 2.0 breaking changes</li>\n<li><a href=\"https://github.com/spumko\">https://github.com/spumko</a> - extracted Hapi functionality for use with Hapi or separately</li>\n<li><a href=\"https://dl.dropboxusercontent.com/u/52139546/hapi%20yet%3F.pdf\">https://dl.dropboxusercontent.com/u/52139546/hapi%20yet%3F.pdf</a> - hapi-yet-slides with lots of code examples which Eran Hammer used for his live stream</li>\n<li><a href=\"http://www.youtube.com/watch?v=B3u0XkbhleA&amp;t=1461\">http://www.youtube.com/watch?v=B3u0XkbhleA&amp;t=1461</a> Eran Hammer Hapi Yet (Hapi 2.0) live stream at &amp;yet, link jumps directly to 24 min where talk starts</li>\n<li><a href=\"https://github.com/hueniverse/postmile\">https://github.com/hueniverse/postmile</a> Eran Hammer’s sizeable hapi example using many of the Hapi features. Postmile is a collaborative list making tool using hapi 2.0 and mongo.</li>\n<li><a href=\"https://github.com/poeticninja/hapi-ninja\">https://github.com/poeticninja/hapi-ninja</a> - Saul Maddox’s <a href=\"https://twitter.com/poeticninja\" title=\"Saul Maddox twitter\">@poeticninja</a> boilerplate Hapi server example Node.js, Hapi 2.0, Swig templates, Gulp task runner</li>\n<li>Follow <a href=\"http://codewinds.com/\">http://codewinds.com/</a> blog and podcast for continuing coverage</li>\n</ul>\n<a name=\"summary\"></a><h2 id=\"summary\">Summary</h2>\n<p>So in summary, Hapi 2.0 is a well thought out release which cleans up and solidifies the codebase while adding some key functionality that can be built on.</p>\n<p> With Walmart putting this framework through the paces and other companies following in its footsteps like the company I am consulting to MasterCard, this framework has evolved with clarity, performance, team usability, and has great deploy and ops support.</p>\n<p>Furthermore, Eran and his team have proved that Hapi can handle Black Friday load with ultimate grace, and this new version solidifies its position among Node web frameworks.</p>\n<p>So I encourage you to check out Hapi, and let me know what you think. Head over to codewinds.com and leave me a comment or send me a tweet.</p></p>\r\n  </div>\r\n</div>","author":"Chris Love","facebook-publisher":"https://www.facebook.com/Love2Dev/","twitter":"ChrisLove","google-plus":"https://plus.google.com/b/110904107389779237581/?pageId=110904107389779237581","linkedin":"https://www.linkedin.com/in/Love2Dev/","pinterest":"https://www.pinterest.com/docluv/","youtube":"https://www.youtube.com/channel/UC3mfh2MN-5D-zOyiRLp9H6g","bing-user-key":"7EDAB92AF63E3B35E57195D810D64C57","image":{"url":"http://codewinds.com/assets/codewinds/codewinds-podcast-300.png","width":300,"height":300},"cache":{},"headers":{"Cache-Control":"public, max-age=30240, s-max-age=1200"},"meta":{"type":"article","og:type":"article","section":"progressive web apps","url":"https://podstr.love2dev.com/","route":"/"},"subtitle":null,"featured-image":"img/pwa-podstr-logo-600x310.png","abstract":"<img align='left' src='img/pwa-podstr-logo-600x310.png' style='margin: 18px 18px 18px 6px; float: left; display: inline' lazyload='1' lazyload='1' />Two years, it&#39;s hard to comprehend how fast the time has flown and how much my life has changed. November 2 marked my two year anniversary with Tellago and I thought I would try to express what these past two years have been like today, Thanksgiving. Back in July 2010, after about 8 months after joining Tellago I wrote about my experiences and thankfulness at the time. ","approved":true,"published":"2014-02-01T07:00:00.000Z","active":true,"tags":[],"publishedDay":20,"publishedMonth":10,"publishedYear":2117,"pubdate":"2014-02-01T07:00:00.000Z","link":"https://api.spreaker.com/download/episode/8734727/ep105_mixdown.mp3","guid":"http://codewinds.com/podcast/002.html","podcast":{"title":"CodeWinds - Leading edge web developer news and training | javascript / React.js / Node.js / HTML5 / web development - Jeff Barczewski","description":"Keep up with the latest web developer technologies and news covering javascript, React.js, Node.js, HTML5. Learn the current best practices in web and mobile app development.","image":"http://codewinds.com/assets/codewinds/codewinds-podcast-1400.png"}}